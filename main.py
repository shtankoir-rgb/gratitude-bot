import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)

# --- –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ ---
ASK_NAME, ASK_TEXT = range(2)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ---
conn = sqlite3.connect("gratitude.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS thanks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    to_whom TEXT,
    text TEXT,
    date TEXT
)
""")
conn.commit()

# --- –°—Ç–∞—Ç–∏—á–Ω—ñ —Å—Ç–∏–∫–µ—Ä–∏ ---
STICKERS = {
    "start": "CAACAgIAAxkBAAEF45NmZb9QkV9oS1dmdqz8RNEAFuXnbwACAgADwZxgDJUbP-vc5PiDNAQ",
    "thanks_saved": "CAACAgIAAxkBAAEF45VmZcDA5Fu_t2O2q89QDYEXWxzcrAACBgADwZxgDAfVOvMXU85gNAQ",
    "export_ready": "CAACAgIAAxkBAAEF45dmZcDp5uBg2SkPfTSpc8LyXvB3BwACBQADwZxgDAxz_dipbfqGNAQ"
}

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç, –ª–µ–≥–µ–Ω–¥–æ! –•–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–µ–Ω—å –∫–æ–º—É—Å—å —Ç–µ–ø–ª—ñ—à–∏–º? –ù–∞–ø–∏—à–∏ /thanks –∞–±–æ /export ‚Äî —ñ –ø–æ—ó—Ö–∞–ª–∏ üöÄ")
    await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=STICKERS["start"])

# --- /thanks ---
async def thanks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üôã‚Äç‚ôÄÔ∏è –ö–æ–º—É —Ö–æ—á–µ—à –ø–æ–¥—è–∫—É–≤–∞—Ç–∏?")
    return ASK_NAME

async def ask_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["to_whom"] = update.message.text.strip()
    await update.message.reply_text("üí¨ –ó–∞ —â–æ —Å–∞–º–µ? (–º–æ–∂–Ω–∞ –∑ –µ–º–æ–¥–∑—ñ, –Ω–µ —Å—Ç—Ä–∏–º—É–π —Å–µ–±–µ!)")
    return ASK_TEXT

async def save_thanks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    to_whom = context.user_data.get("to_whom")
    date = datetime.now().strftime("%Y-%m-%d")
    c.execute("INSERT INTO thanks (to_whom, text, date) VALUES (?, ?, ?)", (to_whom, text, date))
    conn.commit()
    await update.message.reply_text("üî• –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä —Å–≤—ñ—Ç —Ç—Ä—ñ—à–∫–∏ –∫—Ä–∞—â–∏–π ‚ù§Ô∏è")
    await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=STICKERS["thanks_saved"])
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ. –ê–ª–µ –º–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ —Ç–≤–æ—ó–º –¥–æ–±—Ä–∏–º —Å–ª–æ–≤–∞–º üôå")
    return ConversationHandler.END

# --- /export ---
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([["7 –¥–Ω—ñ–≤", "14 –¥–Ω—ñ–≤"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üì¶ –ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –≤–¥—è—á–Ω–æ—Å—Ç—ñ?", reply_markup=keyboard)
    return 1

async def export_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = 7 if "7" in update.message.text else 14
    since = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")

    # –í–∏–¥–∞–ª—è—î–º–æ –≤–¥—è—á–Ω–æ—Å—Ç—ñ —Å—Ç–∞—Ä—à—ñ –∑–∞ 20 –¥–Ω—ñ–≤
    old_limit = (datetime.now() - timedelta(days=20)).strftime("%Y-%m-%d")
    c.execute("DELETE FROM thanks WHERE date < ?", (old_limit,))
    conn.commit()

    c.execute("SELECT to_whom, text, date FROM thanks WHERE date >= ? ORDER BY to_whom, date", (since,))
    rows = c.fetchall()

    if not rows:
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –≤–¥—è—á–Ω–æ—Å—Ç–µ–π –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥... –ú–æ–∂–µ—à —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ üòâ")
        return ConversationHandler.END

    grouped = {}
    for to_whom, text, date in rows:
        grouped.setdefault(to_whom, []).append((date, text))

    messages = []
    for person, entries in grouped.items():
        block = [f"üë§ *{person}*:"] + [f"üìÖ {d}\nüíå {t}" for d, t in entries]
        messages.append("\n\n".join(block))

    full_text = "\n\n".join(messages)

    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
    chunks = [full_text[i:i+4000] for i in range(0, len(full_text), 4000)]
    for chunk in chunks:
        await update.message.reply_text(chunk, parse_mode="Markdown")

    await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=STICKERS["export_ready"])
    return ConversationHandler.END

# --- Main ---
def main():
    import os
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_thanks = ConversationHandler(
        entry_points=[CommandHandler("thanks", thanks)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_text)],
            ASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_thanks)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    conv_export = ConversationHandler(
        entry_points=[CommandHandler("export", export)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, export_choose)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_thanks)
    app.add_handler(conv_export)
    app.run_polling()

if __name__ == "__main__":
    main()
